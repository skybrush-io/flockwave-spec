/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HttpCollmotComSchemasFlockwave10MessageJson = StandardMessage | ErrorMessage;
/**
 * Version number in major.minor.patch format; minor and patch versions are optional
 */
export type Version = string;
/**
 * Identifier of the message
 */
export type MessageID = string;
export type HttpCollmotComSchemasFlockwave10MessageBodyJson =
  | null
  | HttpCollmotComSchemasFlockwave10NotificationBodyJson
  | HttpCollmotComSchemasFlockwave10RequestBodyJson
  | HttpCollmotComSchemasFlockwave10ResponseBodyJson;
export type HttpCollmotComSchemasFlockwave10NotificationBodyJson =
  | Notification_ASYNCRESP
  | Notification_ASYNCST
  | Notification_ASYNCTIMEOUT
  | Notification_CONNDEL
  | Notification_OBJDEL
  | Notification_SYSCLOSE
  | Notification_SYSMSG;
/**
 * Identifier of the receipt
 */
export type ReceiptID = string;
/**
 * IDs of the receipts that the message refers to
 */
export type ReceiptIDs = ReceiptID[];
/**
 * Identifier of a single connection
 */
export type ConnectionID = string;
/**
 * IDs of the connections that the message refers to
 */
export type ConnectionIDs = ConnectionID[];
/**
 * Identifier of a single object
 */
export type ObjectID = string;
/**
 * IDs of the objects that the message refers to
 */
export type ObjectIDs = ObjectID[];
/**
 * Severity of the message
 */
export type Severity = "debug" | "info" | "warning" | "error" | "critical";
export type HttpCollmotComSchemasFlockwave10RequestBodyJson =
  | Request_ASYNCCANCEL
  | Request_ASYNCRESUME
  | Request_AUTHINF
  | Request_AUTHREQ
  | Request_AUTHWHOAMI
  | Request_BCNINF
  | Request_BCNPROPS
  | Request_CLKINF
  | Request_CLKLIST
  | Request_CONNINF
  | Request_CONNLIST
  | Request_DEVINF
  | Request_DEVLIST
  | Request_DEVLISTSUB
  | Request_DEVSUB
  | Request_DEVUNSUB
  | Request_DOCKINF
  | Request_EXTCFG
  | Request_EXTINF
  | Request_EXTLIST
  | Request_EXTLOAD
  | Request_EXTRELOAD
  | Request_EXTSETCFG
  | Request_EXTUNLOAD
  | Request_FWTARGETINF
  | Request_FWTARGETLIST
  | Request_FWUPLOAD
  | Request_LCNINF
  | Request_LOGDATA
  | Request_LOGINF
  | Request_OBJCMD
  | Request_OBJLIST
  | Request_PRMGET
  | Request_PRMSET
  | Request_RTKINF
  | Request_RTKLIST
  | Request_RTKSOURCE
  | Request_RTKSTAT
  | Request_RTKSURVEY
  | Request_SHOWCFG
  | Request_SHOWSETCFG
  | Request_SHOWLIGHTS
  | Request_SHOWSETLIGHTS
  | Request_SYSPING
  | Request_SYSTIME
  | Request_SYSVER
  | Request_UAVCALIB
  | Request_UAVFLY
  | Request_UAVHALT
  | Request_UAVHOVER
  | Request_UAVINF
  | Request_UAVLAND
  | Request_UAVLIST
  | Request_UAVMOTOR
  | Request_UAVPREFLT
  | Request_UAVRST
  | Request_UAVRTH
  | Request_UAVSIGNAL
  | Request_UAVSLEEP
  | Request_UAVTAKEOFF
  | Request_UAVTEST
  | Request_UAVVER
  | Request_UAVWAKEUP
  | Request_WTHAT
  | Request_WTHINF
  | Request_WTHLIST;
/**
 * Name of the authentication method to use
 */
export type Method = string;
/**
 * Session ID for multi-step authentication methods
 */
export type SessionID = number;
/**
 * Data to send to the authentication method
 */
export type Data = string;
/**
 * IDs of the beacons that the message refers to
 */
export type BeaconIDs = ObjectID[];
/**
 * Identifier of a single clock
 */
export type ClockID = string;
/**
 * IDs of the clocks that the message refers to
 */
export type ClockIDs = ClockID[];
/**
 * An absolute device path that uniquely identifies a UAV, a device on a UAV or a channel of a device on a UAV
 */
export type DeviceTreePath = string;
/**
 * Paths of the device tree entries that the message refers to
 */
export type DeviceTreePaths = DeviceTreePath[];
/**
 * Whether to remove all instances of a subscription that matches one of the paths (true) or only a single one (false)
 */
export type RemoveAll = boolean;
/**
 * Whether to also remove all subscriptions that are in the subtrees of the paths specified in the request.
 */
export type IncludeSubtrees = boolean;
/**
 * IDs of the docking stations that the message refers to
 */
export type DockIDs = ObjectID[];
/**
 * Identifier of a single extension
 */
export type ExtensionID = string;
/**
 * IDs of the extensions that the message refers to
 */
export type ExtensionIDs = ExtensionID[];
/**
 * Identifier of a single firmware update target
 */
export type FirmwareUpdateTargetID = string;
/**
 * IDs of the firmware update targets that a request refers to
 */
export type FirmwareUpdateTargetIDs = FirmwareUpdateTargetID[];
/**
 * Identifier of a single flight log
 */
export type FlightLogID = string;
/**
 * IDs of the UAVs that the message refers to
 */
export type UAVIDs = ObjectID[];
/**
 * The command to send
 */
export type Command = string;
/**
 * Positional arguments of the command
 */
export type Arguments = unknown[];
/**
 * Type of an object tracked by the server
 */
export type ObjectType = string;
/**
 * Types of objects that the user is interested in
 */
export type ObjectTypes = ObjectType[];
/**
 * The name of the parameter
 */
export type Name = string;
/**
 * The name of the parameter
 */
export type Name1 = string;
/**
 * Identifier of an RTK preset
 */
export type RTKPresetID = string;
/**
 * IDs of the RTK presets that the message refers to
 */
export type RTKPresetIDs = RTKPresetID[];
/**
 * Minimum duration of RTK survey
 */
export type SurveyDuration = number;
/**
 * Expected RTK survey position accuracy in meters
 */
export type SurveyAccuracy = number;
/**
 * RTK message set to use
 */
export type MessageSet = "msm4" | "msm7";
/**
 * Earth-centered Earth-fixed coordinate of an object
 *
 * @minItems 3
 */
export type ECEFCoordinate = [X, Y, Z];
/**
 * X coordinate in millimeters
 */
export type X = number;
/**
 * Y coordinate in millimeters
 */
export type Y = number;
/**
 * Z coordinate in millimeters
 */
export type Z = number;
export type GNSSTypes = ("gps" | "glonass" | "galileo" | "sbas" | "qzss" | "beidou" | "irnss")[];
/**
 * GPS coordinate of an object
 *
 * @minItems 2
 */
export type GPSCoordinate =
  | [Latitude, Longitude]
  | [Latitude, Longitude, AMSL]
  | [Latitude, Longitude, AMSL, AHL]
  | [Latitude, Longitude, AMSL, AHL, AGL];
/**
 * Latitude, in 1e-7 degrees
 */
export type Latitude = number;
/**
 * Longitude, in 1e-7 degrees
 */
export type Longitude = number;
/**
 * Altitude above mean sea level, in millimeters
 */
export type AMSL = number | null;
/**
 * Altitude above home level, in millimeters
 */
export type AHL = number | null;
/**
 * Altitude above ground level, in millimeters
 */
export type AGL = number | null;
/**
 * Index of the communication channel to use
 */
export type Channel = number;
/**
 * Stores whether the server is allowed to use a broadcast message
 */
export type BroadcastAllowed = boolean;
/**
 * Whether to broadcast the message to all UAVs, ignoring the explicit UAV IDs in the command
 */
export type IgnoreIDs = boolean;
/**
 * Whether the motors should be started or stopped
 */
export type MotorStart = boolean;
/**
 * Whether the command should be forced even if it is unsafe
 */
export type Forced = boolean;
/**
 * The component to reboot
 */
export type Component = string;
/**
 * IDs of the weather stations that the message refers to
 */
export type WeatherStationIDs = ObjectID[];
export type HttpCollmotComSchemasFlockwave10ResponseBodyJson =
  | Response_ACKACK
  | Response_ACKNAK
  | Response_ASYNCCANCEL
  | Response_ASYNCRESUME
  | Response_AUTHINF
  | (Response_AUTHRESP_SingleStep | Response_AUTHRESP_MultiStep)
  | Response_AUTHWHOAMI
  | Response_BCNINF
  | Response_BCNPROPS
  | Response_CLKINF
  | Response_CLKLIST
  | Response_CONNINF
  | Response_CONNLIST
  | Response_DEVINF
  | Response_DEVLIST
  | Response_DEVLISTSUB
  | Response_DEVSUB
  | Response_DEVUNSUB
  | Response_DOCKINF
  | Response_EXTCFG
  | Response_EXTINF
  | Response_EXTLIST
  | Response_EXTLOAD
  | Response_EXTRELOAD
  | Response_EXTSETCFG
  | Response_EXTUNLOAD
  | Response_FWTARGETINF
  | Response_FWTARGETLIST
  | Response_FWUPLOAD
  | Response_LCNINF
  | Response_LOGDATA
  | Response_LOGINF
  | Response_OBJCMD
  | Response_OBJLIST
  | Response_PRMGET
  | Response_PRMSET
  | Response_RTKINF
  | Response_RTKLIST
  | Response_RTKSOURCE
  | Response_RTKSTAT
  | Response_RTKSURVEY
  | Response_SHOWCFG
  | Response_SHOWLIGHTS
  | Response_SYSTIME
  | Response_SYSVER
  | Response_UAVCALIB
  | Response_UAVFLY
  | Response_UAVHALT
  | Response_UAVHOVER
  | Response_UAVINF
  | Response_UAVLAND
  | Response_UAVLIST
  | Response_UAVMOTOR
  | Response_UAVPREFLT
  | Response_UAVRST
  | Response_UAVRTH
  | Response_UAVSIGNAL
  | Response_UAVSLEEP
  | Response_UAVTAKEOFF
  | Response_UAVTEST
  | Response_UAVVER
  | Response_UAVWAKEUP
  | Response_WTHAT
  | Response_WTHINF
  | Response_WTHLIST;
/**
 * Result of the authentication
 */
export type Result = boolean;
/**
 * Explains why the authentication attempt failed
 */
export type FailureReason = string;
/**
 * Name of the user
 */
export type Username = string;
/**
 * Data to send to the client that is to be used in the next step of multi-step authentication methods
 */
export type Data1 = string;
/**
 * Whether the beacon is currently active (operational). May be omitted for passive beacons or points of interest.
 */
export type IsActive = boolean;
/**
 * The heading of the beacon in the local tangent plane, in 1/10th of degrees, if known
 */
export type Heading = number;
/**
 * Timestamp that denotes when the status of the beacon was updated the last time
 */
export type LastUpdatedAt = number;
/**
 * Purpose of the connection
 */
export type Purpose = "debug" | "dock" | "dgps" | "gps" | "time" | "uavRadioLink" | "mocap" | "other";
/**
 * Status of the connection
 */
export type Status = "disconnected" | "connecting" | "connected" | "disconnecting" | "unknown";
/**
 * Type of a device tree node
 */
export type Type = "root" | "object" | "device" | "channel";
/**
 * Type of a channel
 */
export type Type1 =
  | "audio"
  | "boolean"
  | "bytes"
  | "cartesian"
  | "color"
  | "duration"
  | "gps"
  | "number"
  | "object"
  | "string"
  | "time"
  | "video";
/**
 * Class of a device
 */
export type Class =
  | "accelerometer"
  | "actuator"
  | "altimeter"
  | "battery"
  | "camera"
  | "cpu"
  | "cpuCore"
  | "gps"
  | "group"
  | "gyroscope"
  | "led"
  | "magnetometer"
  | "microphone"
  | "misc"
  | "pyro"
  | "radio"
  | "rangefinder"
  | "rc"
  | "rotor"
  | "sensor"
  | "speaker"
  | "sprayer";
/**
 * Operation that can be performed on a channel
 */
export type Operation = "read" | "write";
/**
 * Unit in which the value of a numeric channel is expressed
 */
export type Unit = string;
/**
 * Timestamp that denotes when the status of the docking station was updated the last time
 */
export type LastUpdatedAt1 = number;
export type LicenseID = string;
export type NameOfTheLicenseHolder = string;
export type ExpiryDate = string;
export type FeatureType = string;
export type Description = string;
export type AdditionalInfo = string;
export type AdditionalFeatures = LicenseFeature[];
export type RestrictionType = string;
export type Description1 = string;
export type AdditionalInfo1 = string;
export type Restrictions = LicenseRestrictions[];
/**
 * List of the metadata of flight logs stored on a UAV
 */
export type FlightLogMetadataItems = FlightLogMetadata[];
/**
 * A human-readable title of the preset
 */
export type Title = string;
/**
 * Format of the GPS messages arriving in this configuration
 */
export type MessageFormat = "auto" | "rtcm2" | "rtcm3" | "ubx";
/**
 * Identifier of an RTK source connection
 */
export type RTKPresetSource = string;
/**
 * List of source connections where this preset collects messages from
 */
export type Sources = RTKPresetSource[];
export type StationID = number;
export type AntennaDescriptor = string;
export type SerialNumber = string;
/**
 * RTK message observation statistics
 *
 * @minItems 2
 */
export type RTKMessageObservations = [Age, Size];
/**
 * The age of the last observation in milliseconds
 */
export type Age = number;
/**
 * Size of the observation in bits per second
 */
export type Size = number;
/**
 * RTK satellite carrier-to-noise ratios in dB
 */
export type RTKSatelliteCNRs = number;
/**
 * RTK survey position accuracy in meters
 */
export type SurveyAccuracy1 = number;
/**
 * RTK survey status flags (0: unknown, 1: supported, 2: active, 4: valid)
 */
export type SurveyFlags = number;
/**
 * Explains why RTK survey initiation failed
 */
export type FailureReason1 = string;
/**
 * The flight mode of the UAV
 */
export type FlightMode = string;
/**
 * Position in a local right-handed XYZ coordinate system
 *
 * @minItems 3
 */
export type PositionXYZ = [XComponent, YComponent, ZComponent];
/**
 * X component of the vector, in mm
 */
export type XComponent = number;
/**
 * Y component of the vector, in mm
 */
export type YComponent = number;
/**
 * Z component of the vector, in mm
 */
export type ZComponent = number;
/**
 * Basic information about the GPS fix
 *
 * @minItems 1
 */
export type GPSFix =
  | [GPSFixType]
  | [GPSFixType, NumberOfSatellites]
  | [GPSFixType, NumberOfSatellites, HAcc]
  | [GPSFixType, NumberOfSatellites, HAcc, VAcc];
export type GPSFixType = number;
export type NumberOfSatellites = number | null;
/**
 * Horizontal accuracy, in millimeters
 */
export type HAcc = number | null;
/**
 * Vertical accuracy, in millimeters
 */
export type VAcc = number | null;
/**
 * The heading of the UAV in the local tangent plane, in 1/10th of degrees
 */
export type Heading1 = number;
/**
 * Attitude around the principal aircraft axes
 *
 * @minItems 3
 */
export type Attitude = [RollAngle, PitchAngle, YawAngle];
/**
 * Roll angle, in 1/10th of degrees
 */
export type RollAngle = number;
/**
 * Pitch angle, in 1/10th of degrees
 */
export type PitchAngle = number;
/**
 * Yaw angle, in 1/10th of degrees
 */
export type YawAngle = number;
/**
 * Velocity in the NED coordinate system
 *
 * @minItems 3
 */
export type VelocityNED = [NorthComponent, EastComponent, DownComponent];
/**
 * North component of the vector, in mm/s
 */
export type NorthComponent = number;
/**
 * East component of the vector, in mm/s
 */
export type EastComponent = number;
/**
 * Down component of the vector, in mm/s
 */
export type DownComponent = number;
/**
 * Velocity in a local right-handed XYZ coordinate system
 *
 * @minItems 3
 */
export type VelocityXYZ = [XComponent1, YComponent1, ZComponent1];
/**
 * X component of the vector, in mm/s
 */
export type XComponent1 = number;
/**
 * Y component of the vector, in mm/s
 */
export type YComponent1 = number;
/**
 * Z component of the vector, in mm/s
 */
export type ZComponent1 = number;
/**
 * Timestamp that denotes when the status of the UAV was updated the last time
 */
export type LastUpdatedAt2 = number;
/**
 * Information about the on-board battery of the UAV, if applicable
 *
 * @minItems 1
 */
export type BatteryInformation =
  | [BatteryVoltage]
  | [BatteryVoltage, StateOfCharge]
  | [BatteryVoltage, StateOfCharge, Charging];
/**
 * The voltage of the battery, in 1/10th of volts
 */
export type BatteryVoltage = number;
/**
 * Percentage indicator of the state of charge of the battery (100% = full, 0% = empty, -1 = unknown)
 */
export type StateOfCharge = number;
/**
 * Whether the battery is charging
 */
export type Charging = boolean;
/**
 * Color in RGB565 representation
 */
export type Color = number;
/**
 * Received signal strength indicator, for each of the channels the UAV is accessible on
 */
export type RSSI = number[];
/**
 * List of currently active error codes for a single UAV
 */
export type ListOfErrors = number[];
export type LabelOfThePreflightChecklistItem = string;
/**
 * Result of the preflight check or a single item in a preflight checklist
 */
export type PreflightCheckResult = "off" | "pass" | "warning" | "running" | "softFailure" | "failure" | "error";
export type DetailedMessageForThePreflightChecklistItem = string;
export type PreflightCheckItems = ASingleItemInAPreflightChecklist[];
/**
 * Preflight check summary message
 */
export type PreflightCheckSummary = string;
/**
 * Timestamp that denotes the time the weather information applies to
 */
export type Timestamp = number;
/**
 * Numeric weather condition code according to OpenWeatherMap conventions
 */
export type WeatherConditionCode = number;
/**
 * Time of sunrise; negative if the Sun does not rise on the given day
 */
export type Sunrise = number;
/**
 * Time of sunset; negative if the Sun does not set on the given day
 */
export type Sunset = number;
/**
 * Temperature, in kelvin
 */
export type Temperature = number;
/**
 * Temperature, in kelvin, adjusted for human perception of weather
 */
export type FeelsLike = number;
/**
 * Atmospheric pressure on the sea level, in Pa
 */
export type Pressure = number;
/**
 * Humidity, in %
 */
export type Humidity = number;
/**
 * Atmospheric temperature in 1/10th kelvin below which water droplets begin to condense and dew can form
 */
export type DewPoint = number;
/**
 * Cloudiness, in %
 */
export type Cloudiness = number;
/**
 * UV index, 1/100 units; e.g. 89 --> 0.89
 */
export type UVIndex = number;
export type PlanetaryKIndex = number;
/**
 * Magnetic vector
 */
export type MagneticVector = [] | [North] | [North, East] | [North, East, Down];
/**
 * North component, in nanoteslas
 */
export type North = number;
/**
 * East component, in nanoteslas
 */
export type East = number;
/**
 * Down component, in nanoteslas
 */
export type Down = number;
/**
 * Average visibility, in metres
 */
export type Visibility = number;
/**
 * Meteorological wind direction, in 1/10th degrees clockwise from due North
 */
export type WindDirection = number;
/**
 * Wind speed, in mm/s
 */
export type WindSpeed = number;
/**
 * Wind gust, in mm/s
 */
export type WindGust = number;

export interface StandardMessage {
  "$fw.version": Version;
  id: MessageID;
  refs?: MessageID;
  body: HttpCollmotComSchemasFlockwave10MessageBodyJson;
  [k: string]: unknown;
}
export interface Notification_ASYNCRESP {
  type: "ASYNC-RESP";
  id: ReceiptID;
  error?: string;
  result?: unknown;
  [k: string]: unknown;
}
export interface Notification_ASYNCST {
  type: "ASYNC-ST";
  id: ReceiptID;
  progress: ProgressInformation;
  suspended?: boolean;
  [k: string]: unknown;
}
/**
 * Progress of some operation being executed on a UAV
 */
export interface ProgressInformation {
  percentage?: number;
  message?: string;
  object?: {
    [k: string]: unknown;
  };
}
export interface Notification_ASYNCTIMEOUT {
  type: "ASYNC-TIMEOUT";
  ids: ReceiptIDs;
  [k: string]: unknown;
}
export interface Notification_CONNDEL {
  type: "CONN-DEL";
  ids: ConnectionIDs;
  [k: string]: unknown;
}
export interface Notification_OBJDEL {
  type: "OBJ-DEL";
  ids: ObjectIDs;
  [k: string]: unknown;
}
export interface Notification_SYSCLOSE {
  type: "SYS-CLOSE";
  reason?: string;
  [k: string]: unknown;
}
export interface Notification_SYSMSG {
  type: "SYS-MSG";
  /**
   * @minItems 1
   */
  items: [LogMessage, ...LogMessage[]];
  [k: string]: unknown;
}
/**
 * A single log message sent from the server to the client
 */
export interface LogMessage {
  message: string;
  timestamp?: number;
  sender?: ObjectID;
  severity?: Severity;
  [k: string]: unknown;
}
export interface Request_ASYNCCANCEL {
  type: "ASYNC-CANCEL";
  ids: ReceiptIDs;
  [k: string]: unknown;
}
export interface Request_ASYNCRESUME {
  type: "ASYNC-RESUME";
  ids: ReceiptIDs;
  values?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface Request_AUTHINF {
  type: "AUTH-INF";
}
export interface Request_AUTHREQ {
  type: "AUTH-REQ";
  method: Method;
  session?: SessionID;
  data: Data;
  [k: string]: unknown;
}
export interface Request_AUTHWHOAMI {
  type: "AUTH-WHOAMI";
}
export interface Request_BCNINF {
  type: "BCN-INF";
  ids: BeaconIDs;
  [k: string]: unknown;
}
export interface Request_BCNPROPS {
  type: "BCN-PROPS";
  ids: BeaconIDs;
  [k: string]: unknown;
}
export interface Request_CLKINF {
  type: "CLK-INF";
  ids: ClockIDs;
  [k: string]: unknown;
}
export interface Request_CLKLIST {
  type: "CLK-LIST";
}
export interface Request_CONNINF {
  type: "CONN-INF";
  ids: ConnectionIDs;
  [k: string]: unknown;
}
export interface Request_CONNLIST {
  type: "CONN-LIST";
}
export interface Request_DEVINF {
  type: "DEV-INF";
  paths: DeviceTreePaths;
  [k: string]: unknown;
}
export interface Request_DEVLIST {
  type: "DEV-LIST";
  ids: ObjectIDs;
  [k: string]: unknown;
}
export interface Request_DEVLISTSUB {
  type: "DEV-LISTSUB";
  pathFilter: DeviceTreePaths;
  [k: string]: unknown;
}
export interface Request_DEVSUB {
  type: "DEV-SUB";
  paths: DeviceTreePaths;
  lazy?: boolean;
  [k: string]: unknown;
}
export interface Request_DEVUNSUB {
  type: "DEV-UNSUB";
  paths: DeviceTreePaths;
  removeAll?: RemoveAll;
  includeSubtrees?: IncludeSubtrees;
  [k: string]: unknown;
}
export interface Request_DOCKINF {
  type: "DOCK-INF";
  ids: DockIDs;
  [k: string]: unknown;
}
export interface Request_EXTCFG {
  type: "EXT-CFG";
  ids: ExtensionIDs;
  [k: string]: unknown;
}
export interface Request_EXTINF {
  type: "EXT-INF";
  ids: ExtensionIDs;
  [k: string]: unknown;
}
export interface Request_EXTLIST {
  type: "EXT-LIST";
}
export interface Request_EXTLOAD {
  type: "EXT-LOAD";
  ids: ExtensionIDs;
  [k: string]: unknown;
}
export interface Request_EXTRELOAD {
  type: "EXT-RELOAD";
  ids: ExtensionIDs;
  [k: string]: unknown;
}
export interface Request_EXTSETCFG {
  type: "EXT-SETCFG";
  ids: {
    [k: string]: {
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
}
export interface Request_EXTUNLOAD {
  type: "EXT-UNLOAD";
  ids: ExtensionIDs;
  [k: string]: unknown;
}
export interface Request_FWTARGETINF {
  type: "FW-TARGET-INF";
  ids: FirmwareUpdateTargetIDs;
  [k: string]: unknown;
}
export interface Request_FWTARGETLIST {
  type: "FW-TARGET-LIST";
  supportedBy?: ObjectIDs;
  [k: string]: unknown;
}
export interface Request_FWUPLOAD {
  type: "FW-UPLOAD";
  ids: ObjectIDs;
  target: FirmwareUpdateTargetID;
  blob: string;
  [k: string]: unknown;
}
export interface Request_LCNINF {
  type: "LCN-INF";
  [k: string]: unknown;
}
export interface Request_LOGDATA {
  type: "LOG-DATA";
  uavId: ObjectID;
  logId: FlightLogID;
  [k: string]: unknown;
}
export interface Request_LOGINF {
  type: "LOG-INF";
  ids: UAVIDs;
  [k: string]: unknown;
}
export interface Request_OBJCMD {
  type: "OBJ-CMD";
  ids: ObjectIDs;
  command: Command;
  args?: Arguments;
  kwds?: KeywordArguments;
  [k: string]: unknown;
}
/**
 * Keyword arguments of the command
 */
export interface KeywordArguments {
  [k: string]: unknown;
}
export interface Request_OBJLIST {
  type: "OBJ-LIST";
  filter?: ObjectTypes;
}
export interface Request_PRMGET {
  type: "PRM-GET";
  ids: ObjectIDs;
  name: Name;
  [k: string]: unknown;
}
export interface Request_PRMSET {
  type: "PRM-SET";
  ids: ObjectIDs;
  name: Name1;
  value: Value;
  [k: string]: unknown;
}
/**
 * The value of the parameter
 */
export interface Value {
  [k: string]: unknown;
}
export interface Request_RTKINF {
  type: "RTK-INF";
  ids: RTKPresetIDs;
  [k: string]: unknown;
}
export interface Request_RTKLIST {
  type: "RTK-LIST";
}
export interface Request_RTKSOURCE {
  type: "RTK-SOURCE";
  /**
   * The ID of the RTK source to use
   */
  id?: string;
  [k: string]: unknown;
}
export interface Request_RTKSTAT {
  type: "RTK-STAT";
}
export interface Request_RTKSURVEY {
  type: "RTK-SURVEY";
  settings?: RTKSurveySettings;
  [k: string]: unknown;
}
/**
 * RTK survey settings
 */
export interface RTKSurveySettings {
  duration: SurveyDuration;
  accuracy: SurveyAccuracy;
  messageSet: MessageSet;
  position?: ECEFCoordinate;
  gnssTypes?: GNSSTypes;
  [k: string]: unknown;
}
export interface Request_SHOWCFG {
  type: "SHOW-CFG";
}
export interface Request_SHOWSETCFG {
  type: "SHOW-SETCFG";
  configuration: DroneShowConfiguration;
  [k: string]: unknown;
}
/**
 * Full configuration of a drone show
 */
export interface DroneShowConfiguration {
  start?: {
    /**
     * Whether the server has received authorization from a human operator to start the show
     */
    authorized?: boolean;
    clock?: ClockID | null;
    /**
     * Timestamp when the drone show should start
     */
    time?: number | null;
    method?: "rc" | "auto";
    /**
     * Array containing the IDs of the UAVs that should be started automatically
     */
    uavIds?: ObjectID[];
    [k: string]: unknown;
  };
  /**
   * Mapping of show-specific indices to the corresponding UAV IDs, if known. Not mandatory.
   */
  mapping?: (ObjectID | null)[];
  /**
   * The total duration of the show, in seconds. Not mandatory.
   */
  duration?: number;
  [k: string]: unknown;
}
export interface Request_SHOWLIGHTS {
  type: "SHOW-LIGHTS";
}
export interface Request_SHOWSETLIGHTS {
  type: "SHOW-SETLIGHTS";
  configuration: DroneLightsConfiguration;
  [k: string]: unknown;
}
/**
 * Full configuration of the behaviour of the LED lights on a drone during a drone show
 */
export interface DroneLightsConfiguration {
  /**
   * Type of the light effect.
   */
  effect?: string;
  /**
   * Color of the light effect in RGB notations. Values in the array must be between 0 and 255, inclusive.
   */
  color?: number[];
  [k: string]: unknown;
}
export interface Request_SYSPING {
  type: "SYS-PING";
  [k: string]: unknown;
}
export interface Request_SYSTIME {
  type: "SYS-TIME";
  adjustment?: number;
}
export interface Request_SYSVER {
  type: "SYS-VER";
}
export interface Request_UAVCALIB {
  type: "UAV-CALIB";
  ids: UAVIDs;
  component?: string;
  parameters?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface Request_UAVFLY {
  type: "UAV-FLY";
  ids: UAVIDs;
  target: GPSCoordinate;
  [k: string]: unknown;
}
export interface Request_UAVHALT {
  type: "UAV-HALT";
  ids: UAVIDs;
  transport?: TransportOptions;
  [k: string]: unknown;
}
/**
 * Additional preferences about how the message should be delivered to UAVs
 */
export interface TransportOptions {
  channel?: Channel;
  broadcast?: BroadcastAllowed;
  ignoreIds?: IgnoreIDs;
  [k: string]: unknown;
}
export interface Request_UAVHOVER {
  type: "UAV-HOVER";
  ids: UAVIDs;
  [k: string]: unknown;
}
export interface Request_UAVINF {
  type: "UAV-INF";
  ids: UAVIDs;
  [k: string]: unknown;
}
export interface Request_UAVLAND {
  type: "UAV-LAND";
  ids: UAVIDs;
  transport?: TransportOptions;
  [k: string]: unknown;
}
export interface Request_UAVLIST {
  type: "UAV-LIST";
}
export interface Request_UAVMOTOR {
  type: "UAV-MOTOR";
  ids: UAVIDs;
  start: MotorStart;
  force?: Forced;
  transport?: TransportOptions;
  [k: string]: unknown;
}
export interface Request_UAVPREFLT {
  type: "UAV-PREFLT";
  ids: UAVIDs;
  [k: string]: unknown;
}
export interface Request_UAVRST {
  type: "UAV-RST";
  ids: UAVIDs;
  component?: Component;
  transport?: TransportOptions;
  [k: string]: unknown;
}
export interface Request_UAVRTH {
  type: "UAV-RTH";
  ids: UAVIDs;
  transport?: TransportOptions;
  [k: string]: unknown;
}
export interface Request_UAVSIGNAL {
  type: "UAV-SIGNAL";
  ids: UAVIDs;
  signals?: string[];
  duration?: number;
  transport?: TransportOptions;
  [k: string]: unknown;
}
export interface Request_UAVSLEEP {
  type: "UAV-SLEEP";
  ids: UAVIDs;
  transport?: TransportOptions;
  [k: string]: unknown;
}
export interface Request_UAVTAKEOFF {
  type: "UAV-TAKEOFF";
  ids: UAVIDs;
  transport?: TransportOptions;
  [k: string]: unknown;
}
export interface Request_UAVTEST {
  type: "UAV-TEST";
  ids: UAVIDs;
  component?: string;
  parameters?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface Request_UAVVER {
  type: "UAV-VER";
  ids: UAVIDs;
  [k: string]: unknown;
}
export interface Request_UAVWAKEUP {
  type: "UAV-WAKEUP";
  ids: UAVIDs;
  transport?: TransportOptions;
  [k: string]: unknown;
}
export interface Request_WTHAT {
  type: "WTH-AT";
  position: GPSCoordinate;
  [k: string]: unknown;
}
export interface Request_WTHINF {
  type: "WTH-INF";
  ids: WeatherStationIDs;
  [k: string]: unknown;
}
export interface Request_WTHLIST {
  type: "WTH-LIST";
}
export interface Response_ACKACK {
  type: "ACK-ACK";
}
export interface Response_ACKNAK {
  type: "ACK-NAK";
  reason?: string;
}
export interface Response_ASYNCCANCEL {
  type: "ASYNC-CANCEL";
  success?: ReceiptIDs;
  error?: ErrorMap;
}
export interface ErrorMap {
  [k: string]: string;
}
export interface Response_ASYNCRESUME {
  type: "ASYNC-RESUME";
  success?: ReceiptIDs;
  error?: ErrorMap;
}
export interface Response_AUTHINF {
  type: "AUTH-INF";
  methods: string[];
  required: boolean;
  [k: string]: unknown;
}
export interface Response_AUTHRESP_SingleStep {
  type: "AUTH-RESP";
  result: Result;
  reason?: FailureReason;
  user?: Username;
}
export interface Response_AUTHRESP_MultiStep {
  type: "AUTH-RESP";
  data: Data1;
}
export interface Response_AUTHWHOAMI {
  type: "AUTH-WHOAMI";
  user: Username;
  [k: string]: unknown;
}
export interface Response_BCNINF {
  type: "BCN-INF";
  status?: {
    [k: string]: BeaconStatusInfo;
  };
  error?: ErrorMap;
}
/**
 * Status information of a single beacon
 */
export interface BeaconStatusInfo {
  id: ObjectID;
  active?: IsActive;
  heading?: Heading;
  position?: GPSCoordinate;
  timestamp: LastUpdatedAt;
  [k: string]: unknown;
}
export interface Response_BCNPROPS {
  type: "BCN-PROPS";
  receipt?: ReceiptMap;
  error?: ErrorMap;
  result?: AsyncCommandResponseMap;
}
export interface ReceiptMap {
  [k: string]: ReceiptID;
}
export interface AsyncCommandResponseMap {
  [k: string]: CommandResponse | string;
}
/**
 * Response given by a UAV to a command request
 */
export interface CommandResponse {
  type?: string;
  data?: unknown;
  additionalProperties?: never;
  required?: ["type", "data"];
  [k: string]: unknown;
}
export interface Response_CLKINF {
  type: "CLK-INF";
  status?: {
    [k: string]: ClockInfo;
  };
  error?: ErrorMap;
}
/**
 * Information about a clock
 */
export interface ClockInfo {
  id: ClockID;
  epoch?: string | "unix";
  retrievedAt: number;
  running: boolean;
  ticksPerSecond?: number;
  ticks: number;
  [k: string]: unknown;
}
export interface Response_CLKLIST {
  type: "CLK-LIST";
  ids: ClockIDs;
}
export interface Response_CONNINF {
  type: "CONN-INF";
  status?: {
    [k: string]: ConnectionInfo;
  };
  error?: ErrorMap;
}
/**
 * Information about a connection
 */
export interface ConnectionInfo {
  id: ConnectionID;
  purpose: Purpose;
  description?: string;
  status: Status;
  timestamp?: number;
  [k: string]: unknown;
}
export interface Response_CONNLIST {
  type: "CONN-LIST";
  ids: ConnectionIDs;
  [k: string]: unknown;
}
export interface Response_DEVINF {
  type: "DEV-INF";
  values?: {
    [k: string]: unknown;
  };
  error?: ErrorMap;
}
export interface Response_DEVLIST {
  type: "DEV-LIST";
  devices?: {
    [k: string]: DeviceTreeNode;
  };
  error?: ErrorMap;
}
/**
 * A single device tree node representing a UAV, a device or a channel
 */
export interface DeviceTreeNode {
  type: Type;
  subType?: Type1;
  class?: Class;
  children?: {
    [k: string]: DeviceTreeNode;
  };
  operations?: Operation[];
  unit?: Unit;
}
export interface Response_DEVLISTSUB {
  type: "DEV-LISTSUB";
  paths?: DeviceTreePaths;
}
export interface Response_DEVSUB {
  type: "DEV-SUB";
  success?: DeviceTreePaths;
  error?: ErrorMap;
}
export interface Response_DEVUNSUB {
  type: "DEV-UNSUB";
  success?: DeviceTreePaths;
  error?: ErrorMap;
}
export interface Response_DOCKINF {
  type: "DOCK-INF";
  status?: {
    [k: string]: DockingStationStatusInfo;
  };
  error?: ErrorMap;
}
/**
 * Status information of a single docking station
 */
export interface DockingStationStatusInfo {
  id: ObjectID;
  position?: GPSCoordinate;
  timestamp: LastUpdatedAt1;
  [k: string]: unknown;
}
export interface Response_EXTCFG {
  type: "EXT-CFG";
  status?: {
    [k: string]: {
      [k: string]: unknown;
    };
  };
  error?: ErrorMap;
}
export interface Response_EXTINF {
  type: "EXT-INF";
  status?: {
    [k: string]: ClockInfo1;
  };
  error?: ErrorMap;
}
/**
 * Information about an extension
 */
export interface ClockInfo1 {
  id: ExtensionID;
  loaded: boolean;
  name: string;
  description?: string;
  [k: string]: unknown;
}
export interface Response_EXTLIST {
  type: "EXT-LIST";
  loaded: ExtensionIDs;
  available: ExtensionIDs;
}
export interface Response_EXTLOAD {
  type: "EXT-LOAD";
  status?: {
    [k: string]: {
      [k: string]: unknown;
    };
  };
  error?: ErrorMap;
}
export interface Response_EXTRELOAD {
  type: "EXT-RELOAD";
  status?: {
    [k: string]: {
      [k: string]: unknown;
    };
  };
  error?: ErrorMap;
}
export interface Response_EXTSETCFG {
  type: "EXT-SETCFG";
  status?: {
    [k: string]: {
      [k: string]: unknown;
    };
  };
  error?: ErrorMap;
}
export interface Response_EXTUNLOAD {
  type: "EXT-UNLOAD";
  status?: {
    [k: string]: {
      [k: string]: unknown;
    };
  };
  error?: ErrorMap;
}
export interface Response_FWTARGETINF {
  type: "FW-TARGET-INF";
  result?: {
    [k: string]: FirmwareUpdateTarget;
  };
  error?: ErrorMap;
}
/**
 * A component of an object that can be targeted with a firmware update
 */
export interface FirmwareUpdateTarget {
  id: FirmwareUpdateTargetID;
  name: string;
  [k: string]: unknown;
}
export interface Response_FWTARGETLIST {
  type: "FW-TARGET-LIST";
  ids: FirmwareUpdateTargetIDs;
}
export interface Response_FWUPLOAD {
  type: "FW-UPLOAD";
  receipt?: ReceiptMap;
  error?: ErrorMap;
  result?: AsyncCommandResponseMap;
}
export interface Response_LCNINF {
  type: "LCN-INF";
  license: License;
}
/**
 * A license object that is activated on the server
 */
export interface License {
  id: LicenseID;
  licensee: NameOfTheLicenseHolder;
  expiryDate?: ExpiryDate;
  features?: AdditionalFeatures;
  restrictions?: Restrictions;
  [k: string]: unknown;
}
/**
 * An optional feature that is enabled by a license
 */
export interface LicenseFeature {
  type: FeatureType;
  label?: Description;
  secondaryLabel?: AdditionalInfo;
  parameters?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Restrictions imposed on the functionality of the server by a license
 */
export interface LicenseRestrictions {
  type: RestrictionType;
  label?: Description1;
  secondaryLabel?: AdditionalInfo1;
  parameters?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface Response_LOGDATA {
  type: "LOG-DATA";
  result?: FlightLog;
  error?: string;
  receipt?: ReceiptID;
}
/**
 * Contents of a flight log
 */
export interface FlightLog {
  id: FlightLogID;
  timestamp?: number;
  size?: number;
  kind: string;
  body:
    | string
    | {
        [k: string]: unknown;
      };
  [k: string]: unknown;
}
export interface Response_LOGINF {
  type: "LOG-INF";
  result?: {
    [k: string]: FlightLogMetadataItems;
  };
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
/**
 * Metadata of a single flight log entry stored on a UAV
 */
export interface FlightLogMetadata {
  id: FlightLogID;
  timestamp?: number;
  size?: number;
  kind: string;
  [k: string]: unknown;
}
export interface Response_OBJCMD {
  type: "OBJ-CMD";
  receipt?: ReceiptMap;
  error?: ErrorMap;
  result?: AsyncCommandResponseMap;
}
export interface Response_OBJLIST {
  type: "OBJ-LIST";
  ids: ObjectIDs;
}
export interface Response_PRMGET {
  type: "PRM-GET";
  result?: {
    [k: string]: unknown;
  };
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_PRMSET {
  type: "PRM-SET";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface BoolMap {
  [k: string]: boolean;
}
export interface Response_RTKINF {
  type: "RTK-INF";
  preset: {
    [k: string]: RTKConfigurationPreset;
  };
  error?: ErrorMap;
}
/**
 * Information about an RTK preset
 */
export interface RTKConfigurationPreset {
  title: Title;
  format: MessageFormat;
  sources: Sources;
  [k: string]: unknown;
}
export interface Response_RTKLIST {
  type: "RTK-LIST";
  ids: RTKPresetIDs;
}
export interface Response_RTKSOURCE {
  type: "RTK-SOURCE";
  /**
   * The ID of the RTK source used
   */
  id: string;
}
export interface Response_RTKSTAT {
  type?: "RTK-STAT";
  antenna: RTKAntennaInfo;
  messages: {
    [k: string]: RTKMessageObservations;
  };
  cnr: {
    [k: string]: RTKSatelliteCNRs;
  };
  survey: RTKSurveyStatus;
}
/**
 * Information about an RTK antenna
 */
export interface RTKAntennaInfo {
  stationId?: StationID;
  descriptor?: AntennaDescriptor;
  serialNumber?: SerialNumber;
  position?: GPSCoordinate;
  positionECEF?: ECEFCoordinate;
  [k: string]: unknown;
}
/**
 * RTK survey accuracy and flags
 */
export interface RTKSurveyStatus {
  accuracy: SurveyAccuracy1;
  flags: SurveyFlags;
  [k: string]: unknown;
}
export interface Response_RTKSURVEY {
  type: "RTK-SURVEY";
  settings: RTKSurveySettings;
  reason?: FailureReason1;
}
export interface Response_SHOWCFG {
  type: "SHOW-CFG";
  configuration: DroneShowConfiguration;
  [k: string]: unknown;
}
export interface Response_SHOWLIGHTS {
  type: "SHOW-LIGHTS";
  configuration: DroneLightsConfiguration;
  [k: string]: unknown;
}
export interface Response_SYSTIME {
  type: "SYS-TIME";
  timestamp: number;
  [k: string]: unknown;
}
export interface Response_SYSVER {
  type: "SYS-VER";
  name?: string;
  software: string;
  version: Version;
  revision?: string;
  [k: string]: unknown;
}
export interface Response_UAVCALIB {
  type: "UAV-CALIB";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVFLY {
  type: "UAV-FLY";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVHALT {
  type: "UAV-HALT";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVHOVER {
  type: "UAV-HOVER";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVINF {
  type: "UAV-INF";
  status?: {
    [k: string]: UAVStatusInfo;
  };
  error?: ErrorMap;
}
/**
 * Status information of a single UAV
 */
export interface UAVStatusInfo {
  id: ObjectID;
  mode?: FlightMode;
  position?: GPSCoordinate;
  positionXYZ?: PositionXYZ;
  gps?: GPSFix;
  heading?: Heading1;
  attitude?: Attitude;
  velocity?: VelocityNED;
  velocityXYZ?: VelocityXYZ;
  timestamp: LastUpdatedAt2;
  battery?: BatteryInformation;
  light?: Color;
  rssi?: RSSI;
  errors?: ListOfErrors;
  debug?: string;
  [k: string]: unknown;
}
export interface Response_UAVLAND {
  type: "UAV-LAND";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVLIST {
  type: "UAV-LIST";
  ids: UAVIDs;
  [k: string]: unknown;
}
export interface Response_UAVMOTOR {
  type: "UAV-MOTOR";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVPREFLT {
  type: "UAV-PREFLT";
  status?: {
    [k: string]: UAVPreflightCheckInfo;
  };
  error?: ErrorMap;
}
/**
 * Preflight check information of a single UAV
 */
export interface UAVPreflightCheckInfo {
  items: PreflightCheckItems;
  message?: PreflightCheckSummary;
  result: PreflightCheckResult;
  [k: string]: unknown;
}
export interface ASingleItemInAPreflightChecklist {
  id: ObjectID;
  label?: LabelOfThePreflightChecklistItem;
  result: PreflightCheckResult;
  message?: DetailedMessageForThePreflightChecklistItem;
  [k: string]: unknown;
}
export interface Response_UAVRST {
  type: "UAV-RST";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVRTH {
  type: "UAV-RTH";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVSIGNAL {
  type: "UAV-SIGNAL";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVSLEEP {
  type: "UAV-SLEEP";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVTAKEOFF {
  type: "UAV-TAKEOFF";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVTEST {
  type: "UAV-TEST";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_UAVVER {
  type: "UAV-VER";
  result?: {
    [k: string]: VersionMap;
  };
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
/**
 * Object mapping string identifiers to version numbers in no particular format
 */
export interface VersionMap {
  [k: string]: string;
}
export interface Response_UAVWAKEUP {
  type: "UAV-WAKEUP";
  result?: BoolMap;
  error?: ErrorMap;
  receipt?: ReceiptMap;
}
export interface Response_WTHAT {
  type: "WTH-AT";
  weather?: WeatherInfo;
}
export interface WeatherInfo {
  stationId?: ObjectID;
  position: GPSCoordinate;
  timestamp: Timestamp;
  code?: WeatherConditionCode;
  sunrise?: Sunrise;
  sunset?: Sunset;
  temperature?: Temperature;
  feelsLike?: FeelsLike;
  pressure?: Pressure;
  humidity?: Humidity;
  dewPoint?: DewPoint;
  clouds?: Cloudiness;
  uvIndex?: UVIndex;
  kpIndex?: PlanetaryKIndex;
  magneticVector?: MagneticVector;
  visibility?: Visibility;
  windDirection?: WindDirection;
  windSpeed?: WindSpeed;
  windGust?: WindGust;
  [k: string]: unknown;
}
export interface Response_WTHINF {
  type: "WTH-INF";
  status?: {
    [k: string]: WeatherInfo;
  };
  error?: ErrorMap;
}
export interface Response_WTHLIST {
  type: "WTH-LIST";
  ids: WeatherStationIDs;
}
export interface ErrorMessage {
  "$fw.version": Version;
  id: MessageID;
  refs?: MessageID;
  error: {
    code?: number;
    message?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
